#!/bin/bash
#	Overview:
#	
#	This is a shellscript that can be used to generate .epub, .html, .mobi
#	(and possibly in a later version also .pdf output) from NISO JATS tagged .xml input
#
#	This script relies on the XProc pipeline jats2epub.xpl to do the xml
#	transformation work. This shellscript takes care of all the steps that couldn't
#	be implemented in the XProc pipeline jats2epub.xpl alone.
#	
#	It requires java and calabash (xmlcalabash) to be installed on the system and available in the PATH, or it will exit.
#       Optional but recommended: epubcheck - validate and pack epub archive
#	If epubcheck is not installed, zip will be used to pack the epub archive, but then it will not be validated
#	java is required in order to run calabash (XProc processor) epubcheck
#       Optional: amazon kindlegen for epub > .mobi generation
#
#	Author: Eirik Hanssen, Oslo and Akershus University College of Applied Sciences
#
#	Contact: eirik dot hanssen at hioa dot no
#
#	License:
#	
#	This file is part of jats2epub.
#
#	jats2epub is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	jats2epub is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jats2epub.  If not, see http://www.gnu.org/licenses/gpl.html

# unset $CDPATH in case it is set
unset CDPATH

# save path of current dir for later
current_dir=$PWD

# create working dir if not exists
work_dir=~/.jats2epub
mkdir -p $work_dir/latest-run
mkdir -p $work_dir/converted
latest_run_dir=$work_dir/latest-run
converted_dir=$work_dir/converted

# resolve script_dir (folder where this script is stored)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was loc$
done
script_dir="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# set jats2epub xproc pipeline path
jats2epub_xpl=$script_dir/pipeline/jats2epub.xpl


# display usage
function displayUsage {
	echo ""
	echo "Usage: ./jats2epub xmlfile [required] assetfolder [optional]"
	echo ""
	echo "Available switches:"
	echo "   -h,   --help			Display Help/Troubleshooting"
	echo ""
	echo "Examples"
	echo "   To process \"article.xml\":"
	echo "   (1)	jats2epub article.xml"
	echo ""
	echo "   Process \"article.xml\" and also copy images from \"article-extras/images\" into epub-structure"
	echo "   (2)	jats2epub article.xml article-extras"
	echo ""
	echo "Display Help"
	echo "   (3)	jats2epub		Display this usage"
	echo "   (4)	jats2epub -h		Display more verbose Help/Troubleshooting"

}


function displayHelp {
	echo""
	echo "jats2epub Help/Troubleshooting"
	echo ""
	echo "This is a script to automate ePub creation from an article tagged and validated against the NISO JATS 1.0 XML tagset"
	echo ""
	echo "To begin with, the input xml-file needs to be tagged according to the JATS1.0 tagset and validated against jats xsd or DTD."
	echo ""
	echo "The first parameter to the script is required: the JATS-tagged xml-file to be processed"
	echo "If no images or extra files are used in the article or needed in the epub, you only need to use the first parameter"
	echo ""
	echo "Example 1 - the minimal example"
	echo ""
	echo "(1)	jats2epub article.xml"
	echo ""
	echo "The second parameter, a folder, is optional."
	echo "It must be used if the article contains images or other files or folders to be copied inside the epub structure."
	echo "This content will be placed in the EPUB folder within the epub archive."
	echo ""
	echo "Example 2"
	echo ""
	echo "    Article is located at this relative path:"
	echo "	      article.xml"
	echo ""
	echo "    Images are located at this path:"
	echo "	      article_extras/images/figure01.png"
	echo "	      article_extras/images/figure02.png"
	echo "	      article_extras/images/figure03.png"
	echo ""
	echo "To process article.xml and recursively add the contents of the folder article_extras to the EPUB folder in the epub archive:"
	echo ""
	echo "(2)     jats2epub article.xml article_extras"
	echo ""
	echo "    You can use absolute or relative paths as you wish."
	echo ""
	echo "Log-file tip:"
	echo ""
	echo "    To save all the script output in a logfile for later inspection, append '| tee log.txt':"
	echo ""
	echo "(3)     jats2epub article.xml article_extras | tee log.txt"
	echo ""
}

function ePubValidateAndSave {
	if command -v epubcheck >/dev/null; then
        	echo "NOTICE: Found epubcheck - check $latest_run_dir/epub and if valid, save to $epubname"
		echo ""
		echo "NOTICE: epubcheck output BEGIN"
		echo ""
		epubcheck $latest_run_dir/epub/ -mode exp -save
		cp $latest_run_dir/epub.epub $current_dir/$epubname
		mv $latest_run_dir/epub.epub $converted_dir/$epubname
		echo ""
		echo "NOTICE: epubcheck output END"
		echo ""

	else
        	echo "WARNING: epubcheck not found! Skipping .epub validation!"
		echo "WARNING: packing UNVALIDATED epub archive in $latest_run_dir/epub"
		echo ""
		cd $latest_run_dir/epub
		zip -0Xq $epubname mimetype
		zip -Xr9Dq $epubname *
		echo ""
		echo "WARNING: Copying/Moving UNVALIDATED $epubname to $converted_dir and $current_dir"
		cp $latest_run_dir/epub/$epubname $current_dir
		mv $latest_run_dir/epub/$epubname $converted_dir
	fi
}

function mobiGen {
	if command -v kindlegen >/dev/null; then
        	echo "NOTICE: Found kindlegen - trying to generate .mobi version:"
		echo "        kindlegen output_final/$epubname -o $mobiname"
		echo ""
		echo "NOTICE: kindlegen output BEGIN"
		kindlegen $converted_dir/$epubname -o $mobiname
		echo ""
		echo "NOTICE: kindlegen output END"
		echo ""
	else
	        echo "WARNING: kindlegen not found - skipping .mobi creation!"
		echo ""
	fi
}

# main 'program'
# check if java is installed - print error and exit if not found
command -v java >/dev/null 2>&1 || { echo "FATAL ERROR: JAVA runtime not found - Please install a java runtime environment and try again." >&2; exit 1; }

# check if calabash is installed - print error and exit if not found
command -v calabash >/dev/null 2>&1 || { echo "FATAL ERROR: calabash not found - Please install calabash and try again." >&2; exit 1; }

# check if there is one or two  parameters

if [ "$#" = "1" ] || [ "$#" = "2" ]; then
	filepath=$1
	if [ $1 == "-h" ] || [ $1 == "--help" ]; then
		displayHelp
	elif [ -f "$filepath" ]
	then
		dirname=${filepath%/*}
		filename=${filepath##*/}
		filename_base=${filename%%.*}
		filename_ext=${filename##*.}
		timestamp=$(date +-%Y%m%d-%H%M%S)
		epubname=$filename_base$timestamp.epub
		mobiname=$filename_base$timestamp.mobi
		pdfname=$filename_base$timestamp.pdf
		htmlname=$filename_base$timestamp.html
		xmlname=$filename_base$timestamp.xml
		echo ""
		echo "NOTICE: Clearing out contents of $latest_run_dir"
		rm -rf $latest_run_dir/*
		echo ""
		echo "NOTICE: Creating folders (if they don't exist): $latest_run_dir/epub/"
		mkdir -p $latest_run_dir/epub/EPUB
		echo ""
		echo "NOTICE: Copying over epub-template from $script_dir/assets/epub-template to $latest_run_dir/epub/"
		cp -r $script_dir/assets/epub-template/* $latest_run_dir/epub/
		# copying assets for one article
		# should I check this before running?
		if [ "$#" = "2"  ]; then
			resources=$2
			echo "cp -r $resources/* $latest_run_dir/epub/EPUB"
			cp -r $resources/* $latest_run_dir/epub/EPUB
		fi
		echo ""
		echo "NOTICE: Starting XProc pipeline processing using XML Calabash"
		echo ""
		echo "        Processing \"$dirname/$filename\" with the pipeline \"jats2epub.xpl\""
		echo ""
		echo "NOTICE: XML Calabash output BEGIN"
		echo ""
		calabash -i source=$filepath -p transform="github.com/eirikhanssen/jats2epub â€“ based on github.com/ncbi/JATSPreviewStylesheets" work_dir=$latest_run_dir/ $jats2epub_xpl
		echo ""
		echo "NOTICE: XML Calabash output END"
		echo ""
		echo "NOTICE: If the XProc processing went well, the XML Calabash output will contain a"
		echo "        <c:result>...</c:result> element with the location of each file created by the pipeline."
		echo "        If not, the XML Calabash output will contain error messages to help you troubleshoot."
		echo ""
		ePubValidateAndSave
		echo ""
		echo "NOTICE: Copying $htmlname to $current_dir and $latest_run_dir"
		echo ""
		cp $latest_run_dir/article-webversion.html $converted_dir/$htmlname
		cp $latest_run_dir/article-webversion.html $current_dir/$htmlname
		mobiGen
		cp $converted_dir/$mobiname $current_dir
		cd $current_dir
		cp $filepath $converted_dir/$xmlname
		cp $filepath $xmlname
		echo "NOTICE: DONE! Script has completed."
		echo "    If successful the following files have been stored in $converted_dir and $current_dir:"
		echo "        $epubname"
 		echo "        $xmlname"
                echo "        $mobiname"
                echo "        $htmlname"
		echo ""
		echo "    If something went wrong, try to inspect the terminal output, the input xml-file and files in"
		echo "    $latest_run_dir"
		echo ""
	else
		echo ""
		echo "ERROR: The file '$filepath' was not found."
		echo ""
		displayUsage
	fi
else 
	displayUsage
fi
