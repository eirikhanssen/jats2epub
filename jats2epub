#!/bin/bash
#	Overview:
#	
#	This is a linux bash script that can be used to generate .epub, .html, .mobi 
#	(and in a later version also .pdf output) from NISO JATS tagged .xml input
#	This script relies on the XProc pipeline process-jats.xpl to do the xml
#	transformation work. This bash script takes care of all the steps that couldn't 
#	be implemented in the XProc pipeline process-jats.xpl alone.
#	
#	It requires java and calabash to be installed on the system, or it will exit.
#
#	Author: 
#
#	Eirik Hanssen, Oslo and Akershus University College of Applied Sciences
#
#	Contact:
#
#	eirik dot hanssen at hioa dot no
#
#	License:
#	
#	This file is part of jats2epub.
#
#	jats2epub is free software: you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation, either version 3 of the License, or
#	(at your option) any later version.
#
#	jats2epub is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with jats2epub.  If not, see http://www.gnu.org/licenses/gpl.html

# display usage
function displayUsage {
	echo ""
	echo "Usage: ./jats2epub xmlfile [required] assetfolder [optional]"
	echo ""
	echo "Available switches:"
	echo "   -h,   --help			Display Help/Troubleshooting"
	echo ""
	echo "Examples"
	echo "   To process \"article.xml\" in the \"xml-source folder\":"
	echo "   (1)	./jats2epub xml-source/article.xml"
	echo ""
	echo "   To process \"article.xml\" in the \"xml-source folder\" and also copy images from \"xml-source/article-extras/images\" into epub-structure:"
	echo "   (2)	./jats2epub xml-source-folder/article.xml xml-source-folder/article-extras"
	echo ""
	echo "Display Help/Troubleshooting/Install-info:"
	echo "   (3)	./jats2epub		Display this usage"
	echo "   (4)	./jats2epub -h		Display Help/Troubleshooting"

}


function displayHelp {
	echo""
	echo "jats2epub help/troubleshooting"
	echo ""
	echo "This is a script to automate ePub creation from an article tagged and validated against the NISO JATS 1.0 XML tagset"
	echo ""
	echo "To begin with, the input xml-file needs to be tagged according to the JATS1.0 tagset and validated against jats xsd or DTD."
	echo ""
	echo "The first parameter to the script is required: the xml-file to be processed"
	echo "If no images or extra files are used in the article or needed in the epub, you only need to use the first parameter"
	echo ""
	echo "Example 1"
	echo ""
	echo "(1)	./jats2epub xml-source/article.xml"
	echo ""
	echo "The second parameter is optional: a folder. It must be used if the article contains images or other files or folders to be copied inside the epub"
	echo ""
	echo "Example 2"
	echo ""
	echo "Article is located at this path:"
	echo "	/home/username/xml-source/article01.xml"
	echo ""
	echo "Images are located at this path:"
	echo "	/home/username/xml-source/article_extras/images/figure01.png"
	echo "	/home/username/xml-source/article_extras/images/figure02.png"
	echo "	/home/username/xml-source/article_extras/images/figure03.png"
	echo ""
	echo "To process article01.xml and also copy the \"images\" folder as well as any other files or folders in article_extras/ to the epub:"
	echo ""
	echo "(2)	./jats2epub /home/username/xml-source/article.xml /home/username/xml-source/article_extras"
	echo ""
	echo "You don't have to use absolute paths, you can use relative paths as well."
	echo ""
}

function ePubValidation {
	if command -v epubcheck >/dev/null; then
        	echo "NOTICE: Found epubcheck - validating output_final/$epubname:"
		echo ""
		echo "NOTICE: epubcheck output BEGIN"
		echo ""
		epubcheck output_final/$epubname
		echo ""
		echo "NOTICE: epubcheck output END"
		echo ""

	else
        	echo "WARNING: epubcheck not found - skipping .epub validation!"
		echo ""
	fi
}

function mobiGen {
	if command -v kindlegen >/dev/null; then
        	echo "NOTICE: Found kindlegen - trying to generate .mobi version:"
		echo "        kindlegen output_final/$epubname -o $mobiname"
		echo ""
		echo "NOTICE: kindlegen output BEGIN"
		kindlegen output_final/$epubname -o $mobiname
		echo ""
		echo "NOTICE: kindlegen output END"
		echo ""
	else
	        echo "WARNING: kindlegen not found - skipping .mobi creation!"
		echo ""
	fi
}

# main 'program'
# Find where we’re running from.
base_dir="$(dirname -- "$0")"
target_dir="$PWD"
# append our programs directory copy of calabash
PATH=$PATH:"$base_dir/programs/xmlcalabash"

# check if java is installed - print error and exit if not found
command -v java >/dev/null 2>&1 || { echo "FATAL ERROR: JAVA runtime not found - Please install a java runtime environment and try again." >&2; exit 1; }

# check if calabash is installed - print error and exit if not found
command -v calabash >/dev/null 2>&1 || { echo "FATAL ERROR: calabash not found - Please install calabash and try again." >&2; exit 1; }

# check if there is one or two  parameters

if [ "$#" = "1" ] || [ "$#" = "2" ]; then
	filepath=$1
	if [ $1 == "-h" ] || [ $1 == "--help" ]; then
		displayHelp
	elif [ -f "$filepath" ]
	then
		filename=${filepath##*/}
		filename_base=${filename%%.*}
		filename_ext=${filename##*.}
		timestamp=$(date +-%Y%m%d-%H%M%S)
		epubname=$filename_base$timestamp.epub
		mobiname=$filename_base$timestamp.mobi
		pdfname=$filename_base$timestamp.pdf
		htmlname=$filename_base$timestamp.html
		xmlname=$filename_base$timestamp.xml
		echo ""
		echo "NOTICE: Clearing old contents of output_working/"
		rm -rf $target_dir/output_working/*
		echo ""
		echo "NOTICE: Creating folders (if they don't exist): output_working/epub/, output_final"
		mkdir -p $target_dir/output_working/epub/
		mkdir -p $target_dir/output_final
		echo ""
		echo "NOTICE: Copying over epub-template from assets/epub-template to output_working/epub/"
		cp -r $base_dir/assets/epub-template/* $target_dir/output_working/epub/
		# copying assets for one article
		# should I check this before running?
		if [ "$#" = "2"  ]; then
			resources=$2
			echo "cp -r $resources/* $target_dir/output_working/epub/OEBPS"
			cp -r $resources/* $target_dir/output_working/epub/OEBPS
		fi
		echo ""
		echo "NOTICE: Starting XProc pipeline processing using XML Calabash"
		echo ""
		echo "        Processing \"$filepath\" with the pipeline \"process-jats-xml.xpl\""
		echo ""
		cp $base_dir/process-jats-xml.xpl $target_dir/output_working/
		echo "NOTICE: XML Calabash output BEGIN"
		echo ""
		calabash -i source=$filepath -p transform="jats2epub – built on top of github.com/ncbi/JATSPreviewStylesheets" jats2epub="$base_dir" $target_dir/output_working/process-jats-xml.xpl
		echo ""
		echo "NOTICE: XML Calabash output END"
		echo ""
		echo "NOTICE: If the XProc processing went well, the XML Calabash output will contain a"
		echo "        <c:result>...</c:result> element with the location of each file created by the pipeline."
		echo "        If not, the XML Calabash output will contain error messages to help you troubleshoot."
		echo ""
		echo "NOTICE: Packing contents of output_working/epub/ with zip to $epubname"
		pushd $target_dir/output_working/epub
		zip -0Xq $epubname mimetype
		zip -Xr9Dq $epubname *
		echo ""
		echo "NOTICE: Moving $epubname to output_final/$epubname"
		mv $epubname $target_dir/output_final/
		popd
		echo ""
		echo "NOTICE: Moving html-version of article to output_final/$htmlname"
		echo ""
		mv $target_dir/output_working/article-webversion.html $target_dir/output_final/$htmlname
		ePubValidation
		mobiGen
		cp $filepath $target_dir/output_final/$xmlname
		echo "NOTICE: DONE! Script has completed."
		echo "        Please check the script output as well as files created in the folders output_final/ and output_working/"
		echo ""

	else
		echo ""
		echo "ERROR: The file '$filepath' was not found."
		echo ""
		displayUsage
	fi
else 
	displayUsage
fi
